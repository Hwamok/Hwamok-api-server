plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.epages.restdocs-api-spec' version '0.18.2'
    id "org.hidetake.swagger.generator" version "2.19.2"
    id 'java-test-fixtures'
}

group = 'com.hwamok'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // queryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    swaggerCodegen "io.swagger.codegen.v3:swagger-codegen-cli:3.0.44"
    swaggerUI "org.webjars:swagger-ui:3.52.1"

    // 테스트코드를  어플리케이션코드에서 활용할수 있도록 함
    compileOnly 'org.springframework.boot:spring-boot-starter-test'
    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.springframework.restdocs:spring-restdocs-mockmvc'

    runtimeOnly 'com.mysql:mysql-connector-j'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'
    testImplementation 'org.springframework.security:spring-security-test'
}

def activeProfile = project.findProperty("spring.profiles.active") ?: "local"

openapi3 {
    servers = [{ url = getServerUrl(activeProfile)}]
    title = "Hwamok API Documentation"
    description = "Hwamok 서버 문서"
    version = "0.0.1"
    format = "json"
}

swaggerSources {
    create("convert") {
        setInputFile(file("$buildDir/api-spec/openapi3.json"))
        code {
            language = "html"
        }
    }
}

tasks.named('generateSwaggerUIConvert') {
    dependsOn 'openapi3'
}

tasks.named('test') {
    useJUnitPlatform()
}

def getServerUrl(profile) {
    switch (profile) {
        case "dev":
            return "http://dev-localhost:8080.com"
        default:
            return "http://localhost:8080"
    }

}